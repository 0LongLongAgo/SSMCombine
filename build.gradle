group 'com.company.combine'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'groovy'
apply plugin: 'idea'
sourceCompatibility = 1.8

repositories {
    maven{url 'http://maven.aliyun.com/nexus/content/groups/public'}
    mavenCentral()
}
configurations {
    mybatisGenerator
}
dependencies {

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'junit', name: 'junit', version: '4.12'

    // https://mvnrepository.com/artifact/org.mybatis.generator/mybatis-generator-core
    compile group: 'org.mybatis.generator', name: 'mybatis-generator-core', version: '1.3.5'
    // https://mvnrepository.com/artifact/tk.mybatis/mapper
    compile group: 'tk.mybatis', name: 'mapper', version: '3.4.2'
// https://mvnrepository.com/artifact/mysql/mysql-connector-java
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.8'

    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.5'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.8'
}

def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/jdbc.properties") .withInputStream {
        properties.load(it)
    }
    file("src/main/resources/generateMapper.properties").withInputStream {
        properties.load(it)
    }
    properties.each {
        project.extensions.add("$it.key",it.value)
    }
}

task mybatisGenerate << {
    def properties = getDbProperties()
//    ant.properties['targetProject'] = projectDir.path
//    ant.properties['driverClass'] = properties.getProperties("jdbc.driver")
//    ant.properties['connectionURL'] = properties.getProperties("jdbc.url")
//    ant.properties['userId'] = properties.getProperties("jdbc.username")
//    ant.properties['password'] = properties.getProperties("jdbc.password")
//    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
//    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
//    ant.properties['modelPackage'] = properties.getProperties("package.model")
//    ant.properties['mapperPackage'] = properties.getProperties("package.mapper")
//    ant.properties['sqlMapperPackage'] = properties.getProperties("package.xml")

    ant.properties['targetProject'] = projectDir.path
//    ant.properties['jarDirection'] = project['jdbc.driver']
    ant.properties['driverClass'] = project['jdbc.driver']
    ant.properties['connectionURL'] = project['jdbc.url']
    ant.properties['userId'] = project['jdbc.username']
    ant.properties['password'] = project['jdbc.password']
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = project['package.model']
    ant.properties['mapperPackage'] = project['package.mapper']
    ant.properties['sqlMapperPackage'] = project['package.xml']
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}
